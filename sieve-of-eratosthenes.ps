%!PS

%
% This is a naive implementation of the sieve of eratosthenes
% in Postscript language. This sieve should be a genuine eratosthenes sieve,
% because there is no primality tests involved.
% The maximum size of array is dependent on interpreters.
% The maximum range is up to 60000 in Ghostscript.
%


(Enter the top of the range of primes:\n) print flush
(%stdin) (r) file /stdin exch def
1024 string /inbuf exch def
{

    stdin inbuf readline {dup (you have entered ) print == flush exit}
    {(Enter the upper range of primes) == flush} ifelse

} loop

/nstr exch def
{nstr cvi} stopped {(illegal ) print nstr == flush  quit} if
/N exch def

/sieve
{
/n exch def
/m n 1 sub def

% initializing the array
/pool
[0 1 m {} for] def
% the first prime
/p 2 def

% the main loop
{

2 p mul  p m {pool exch 0 put} for

p 1 add /p exch def
{
    pool p get 0 ne {exit}{1 p add /p exch def} ifelse
    p m gt {exit} if
} loop

% break
p p mul m gt { exit} if

} loop


/final [2 1 m { dup pool exch get 0 ne { pool exch get  } {pop} ifelse } for] def


}
def

N sieve

(The primes are:\n) print flush
final == flush


quit
